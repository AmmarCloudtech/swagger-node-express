{
  "name": "swagger-node-express-ext",
  "version": "1.2.13",
  "author": {
    "name": "Tony Tam",
    "email": "fehguy@gmail.com",
    "url": "http://developer.wordnik.com"
  },
  "contributors": [
    {
      "name": "Fernando Doglio",
      "email": "deleteman@gmail.com"
    }
  ],
  "description": "Wordnik swagger implementation for the express framework with a before filter add-on to controllers",
  "repository": {
    "type": "git",
    "url": "https://github.com/deleteman/swagger-node-express"
  },
  "keywords": [
    "http",
    "rest",
    "swagger",
    "server"
  ],
  "main": "index.js",
  "directories": {
    "lib": "./Common/node"
  },
  "engines": {
    "node": ">= 0.8.x"
  },
  "dependencies": {
    "connect": ">= 1.8.x",
    "express": "3.x",
    "docco": "0.4.x",
    "underscore": "1.5.1"
  },
  "license": "apache 2.0",
  "readme": "This is the Wordnik Swagger code for the express framework.  For more on Swagger, please visit http://swagger.wordnik.com.  For more on express, please visit https://github.com/visionmedia/express\r\n\r\n#Why a different module?\r\n\r\nThe main motivation behind this module, is that I needed to do validations that might affect the flow of a request agains MongoDB. These vaildations had to be of async nature, but the valdiator describe below doens't accept this type of function, so in order to make it work I forked and extended Swagger-Node-Express.\r\n\r\nThere is also a pull request awaiting approval on the official Github repo.\r\n\r\nSee below for a code sample of how the _before_ function is defined.\r\n\r\n## READ MORE about swagger!\r\n\r\nSee the [swagger website](http://swagger.wordnik.com) or the [swagger-core wiki](https://github.com/wordnik/swagger-core/wiki), which contains information about the swagger json spec.\r\n\r\nTry a sample!  The source for a [functional sample](https://github.com/wordnik/swagger-node-express/blob/master/SAMPLE.md) is available on github:\r\n\r\n\r\n\r\n### Adding swagger to your express-based API\r\n\r\nInclude swagger.js in your app and add express as the app handler:\r\n\r\n```js\r\nvar express = require(\"express\")\r\n , url = require(\"url\")\r\n , swagger = require(\"swagger-node-express\");\r\n\r\nvar app = express();\r\napp.use(express.bodyParser());\r\n\r\nswagger.setAppHandler(app);\r\n```\r\n\r\nYou can optionally add a validator function, which is used to filter the swagger json and request operations:\r\n\r\n```js\r\n// This is a sample validator.  It simply says that for _all_ POST, DELETE, PUT  methods, \r\n// the header api_key OR query param api_key must be equal to the string literal \r\n// special-key.  All other HTTP ops are A-OK */\r\n\r\nswagger.addValidator(\r\n  function validate(req, path, httpMethod) {\r\n    //  example, only allow POST for api_key=\"special-key\"\r\n    if (\"POST\" == httpMethod || \"DELETE\" == httpMethod || \"PUT\" == httpMethod) {\r\n      var apiKey = req.headers[\"api_key\"];\r\n      if (!apiKey) {\r\n        apiKey = url.parse(req.url,true).query[\"api_key\"]; }\r\n      if (\"special-key\" == apiKey) {\r\n        return true; \r\n      }\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n);\r\n\r\n```\r\n\r\nYou now add models to the swagger context.  Models are described in a JSON format, per the [swagger model specification](https://github.com/wordnik/swagger-core/wiki/Datatypes).  Most folks keep them in a separate file (see [here](https://github.com/wordnik/swagger-node-express/blob/master/Apps/petstore/models.js) for an example), or you can add them as such:\r\n\r\n```js\r\nswagger.addModels(models);\r\n\r\n```\r\n\r\nNext, add some resources.  Each resource contains a swagger spec as well as the action to execute when called.  The spec contains enough to describe the method, and adding the resource will do the rest.  For example:\r\n\r\n\r\n```js\r\nvar findById = {\r\n  'spec': {\r\n    \"description\" : \"Operations about pets\",\r\n    \"path\" : \"/pet.{format}/{petId}\",\r\n    \"notes\" : \"Returns a pet based on ID\",\r\n    \"summary\" : \"Find pet by ID\",\r\n    \"method\": \"GET\",\r\n    \"params\" : [swagger.pathParam(\"petId\", \"ID of pet that needs to be fetched\", \"string\")],\r\n    \"responseClass\" : \"Pet\",\r\n    \"errorResponses\" : [swagger.errors.invalid('id'), swagger.errors.notFound('pet')],\r\n    \"nickname\" : \"getPetById\"\r\n  },\r\n  'before': funtion(req, res, action) { //Separates validation from the main action code.\r\n     if (!req.params.petId) { //Usefull when validation requires async callbacks.\r\n        throw swagger.errors.invalid('id'); \r\n     } else {\r\n      action(req, res); //now we call the action\r\n   }\r\n  },\r\n  'action': function (req,res) {\r\n    var id = parseInt(req.params.petId);\r\n    var pet = petData.getPetById(id);\r\n\r\n    if(pet) res.send(JSON.stringify(pet));\r\n    else throw swagger.errors.notFound('pet');\r\n  }\r\n};\r\n\r\nswagger.addGet(findById);\r\n\r\n```\r\n\r\nAdds an API route to express and provides all the necessary information to swagger.\r\n\r\nFinally, configure swagger with a `public` URL and version:\r\n\r\n```js\r\nswagger.configure(\"http://petstore.swagger.wordnik.com\", \"0.1\");\r\n```\r\n\r\nand the server can be started:\r\n\r\n```js\r\napp.listen(8002);\r\n```\r\n\r\nNow you can open up a [swagger-ui](https://github.com/wordnik/swagger-ui) and browse your API, generate a client with [swagger-codegen](https://github.com/wordnik/swagger-codegen), and be happy.\r\n\r\n\r\n### Other Configurations\r\n\r\n#### .{format} suffix removal\r\n\r\nIf you don't like the .{format} or .json suffix, you can override this before configuring swagger:\r\n\r\n```js\r\nswagger.configureSwaggerPaths(\"\", \"/api-docs\", \"\");\r\n```\r\n\r\nThat will put the resource listing under `/api-docs`, and ditch the `.{format}` on each of the apis you're adding to.  Make sure to set the paths correctly in your spec configuration though, like such:\r\n\r\n```js\r\n// note the .{format} is removed from the path!\r\nvar findById = {\r\n  'spec': {\r\n    \"description\" : \"Operations about pets\",\r\n    \"path\" : \"/pet/{petId}\",\r\n    \"notes\" : \"Returns a pet based on ID\",\r\n    ...\r\n```\r\n\r\n#### Mapping swagger to subpaths\r\n\r\nTo add a subpath to the api (i.e. list your REST api under `/api` or `/v1`), you can configure express as follows:\r\n\r\n```js\r\nvar app = express();\r\nvar subpath = express();\r\n\r\napp.use(express.bodyParser());\r\napp.use(\"/v1\", subpath);\r\n\r\nswagger.setAppHandler(subpath);\r\n```\r\n\r\nNow swagger and all apis configured through it will live under the `/v1` path (i.e. `/v1/api-docs.json`).\r\n\r\n#### Allows-origin and special headers\r\n\r\nIf you want to modify the default headers sent with every swagger-managed method, you can do so as follows:\r\n\r\n```js\r\nswagger.setHeaders = function setHeaders(res) {\r\n  res.header('Access-Control-Allow-Origin', \"*\");\r\n  res.header(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE, PUT\");\r\n  res.header(\"Access-Control-Allow-Headers\", \"Content-Type, X-API-KEY\");\r\n  res.header(\"Content-Type\", \"application/json; charset=utf-8\");\r\n};\r\n```\r\nIf you have a special name for an api key (such as `X-API-KEY`, per above), this is where you can inject it.\r\n",
  "readmeFilename": "README.md",
  "_id": "swagger-node-express-ext@1.2.8",
  "_from": "swagger-node-express-ext@1.2.8"
}
